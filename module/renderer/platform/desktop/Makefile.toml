[config]
skip_core_tasks = true
skip_git_env_info = true
skip_rust_env_info = true
skip_crate_env_info = true
# reduce_output = true

# Private

[tasks.desktop_watch]
private = true
watch = { postpone = true, watch = [ "${CARGO_MAKE_CURRENT_TASK_INITIAL_MAKEFILE_DIRECTORY}/../../src/" ] }

[tasks.prepare_linux_target_on_mac]
private = true
script_runner = "@duckscript"
script = '''
# add rust toolchain
exec rustup target add x86_64-unknown-linux-gnu
# add OS compilers
exec brew tap SergioBenitez/osxct
exec brew install x86_64-unknown-linux-gnu
# setup linker for target
exec rm -rf .cargo
exec mkdir .cargo
writefile .cargo/config "[target.x86_64-unknown-linux-gnu]\nlinker = \"x86_64-unknown-linux-gnu-gcc\""
'''

[tasks.prepare_windows_target_on_mac]
private = true
script_runner = "@duckscript"
script = '''
# add rustup toolchain
exec rustup target add x86_64-pc-windows-gnu
# install mingw for compilation Windows apps
exec brew install mingw-w64
# setup linker for target
exec rm -rf .cargo
exec mkdir .cargo
writefile .cargo/config "[target.x86_64-pc-windows-gnu]\nlinker = \"x86_64-w64-mingw32-gcc\""
'''

[tasks.prepare_windows_target_on_linux]
private = true
script_runner = "@duckscript"
script = '''
# add rustup toolchain
exec rustup target add x86_64-pc-windows-gnu
# install mingw for compilation Windows apps
exec sudo apt install mingw-w64
'''

# Build from Windows to Linux and MacOs has many restrictions
# and needs many time to write some workable task

# Public

[tasks.desktop_build]
description = "Build debug of desktop target."
private = false
category = "Desktop"
command = "cargo"
args = [
  "build",
  "--manifest-path", "${CARGO_MAKE_CURRENT_TASK_INITIAL_MAKEFILE_DIRECTORY}/../../Cargo.toml",
  "--bin", "desktop"
]

[tasks.desktop_build_release]
description = "Build release of desktop target."
private = false
category = "Desktop"
command = "cargo"
args = [
  "build",
  "--manifest-path", "${CARGO_MAKE_CURRENT_TASK_INITIAL_MAKEFILE_DIRECTORY}/../../Cargo.toml",
  "--bin", "desktop",
  "--release"
]

[tasks.desktop_build_linux_on_mac]
description = "Build desktop target for GNU/Linux distributives on MacOS."
private = false
category = "Desktop"
dependencies = [ "prepare_linux_target_on_mac" ]
command = "cargo"
args = [
  "build",
  "--release",
  "--target", "x86_64-unknown-linux-gnu",
  "--manifest-path",
  "${CARGO_MAKE_CURRENT_TASK_INITIAL_MAKEFILE_DIRECTORY}/../../Cargo.toml",
  "--bin", "desktop"
]

[tasks.desktop_build_windows_on_mac]
description = "Build target for Windows on MacOS."
private = false
category = "Desktop"
dependencies = [ "prepare_windows_target_on_mac" ]
command = "cargo"
args = [
  "build",
  "--release",
  "--target", "x86_64-pc-windows-gnu",
  "--manifest-path",
  "${CARGO_MAKE_CURRENT_TASK_INITIAL_MAKEFILE_DIRECTORY}/../../Cargo.toml",
  "--bin", "desktop"
]

[tasks.desktop_build_windows_on_linux]
description = "Build target for Windows on Debian-based GNU/Linux disributives."
private = false
category = "Desktop"
dependencies = [ "prepare_windows_target_on_linux" ]
command = "cargo"
args = [
  "build",
  "--release",
  "--target", "x86_64-pc-windows-gnu",
  "--manifest-path", "${CARGO_MAKE_CURRENT_TASK_INITIAL_MAKEFILE_DIRECTORY}/../../Cargo.toml",
  "--bin", "desktop"
]

[tasks.desktop_rebuild]
description = "Rebuild debug of desktop target."
private = false
category = "Desktop"
command = "cargo"
args = [
  "build",
  "--manifest-path", "${CARGO_MAKE_CURRENT_TASK_INITIAL_MAKEFILE_DIRECTORY}/../../Cargo.toml",
  "--bin", "desktop"
]

[tasks.desktop_run]
description = "Run debug of desktop target"
private = false
category = "Desktop"
command = "cargo"
args = [
  "run",
  "--manifest-path", "${CARGO_MAKE_CURRENT_TASK_INITIAL_MAKEFILE_DIRECTORY}/../../Cargo.toml",
  "--bin", "desktop"
]

[tasks.desktop_run_watching]
description = "Rerun debug desktop target on file change."
category = "Desktop"
private = false
extend = "desktop_watch"
dependencies = [ "desktop_run" ]

