[config] 
skip_core_tasks = true #to skip default predefined flow

[env]
CARGO_MAKE_WEB_PORT = 8080

#### Private

[tasks.watch]
private = true
watch = { watch = [ "./src/" ] }

[tasks.build-web-target]
private = true
command = "cargo"
install_script = "rustup target add wasm32-unknown-unknown"
args = [ "build", "--target", "wasm32-unknown-unknown", "--features", "wgpu/webgl,winit/web-sys" ]

[tasks.build-web-bindings]
private = true
install_crate = "wasm-bindgen-cli"
command = "wasm-bindgen"
args = [ "--target", "web", "--out-dir", "target/web", "target/wasm32-unknown-unknown/debug/webgpu.wasm" ]

[tasks.build-web-copy-static]
private = true
script_runner = "@shell"
script = '''
cp static/index.html target/web/index.html
'''

[tasks.build-android-target]
private = true
command = "cargo"
args = [ "apk", "build" ]

[tasks.run-android-target]
private = true
command = "cargo"
args = [ "apk", "run" ]

[tasks.generate-ios-config]
private = true
condition = { files_not_exist = [ "${CARGO_MAKE_WORKING_DIRECTORY}/ios/project.yml" ] }
script_runner = "@rust"
script = '''
//! ```cargo
//! [dependencies]
//! handlebars = "4.1.4"
//! toml = "0.5.8"
//! serde = { version = "1.0.130", features = ["derive"] }
//! ```

#[derive( serde::Serialize, serde::Deserialize )]
struct IOSConfig
{
  development_team: String
} 

#[derive( serde::Serialize, serde::Deserialize )]
struct Config 
{
  ios: IOSConfig,
}

fn main()
{
  let cwd_path = std::env::var( "CARGO_MAKE_WORKING_DIRECTORY" ).unwrap();
  let cwd = std::path::Path::new( &cwd_path );
  let xcode_project_template = std::fs::read_to_string( cwd.join( "ios/project.hbs" ) ).unwrap();
  let mobile_template = std::fs::read_to_string( cwd.join( "mobile.hbs" ) ).unwrap();

  let handlebars = handlebars::Handlebars::new();

  let toml_str = std::fs::read_to_string( cwd.join( "config/private.toml" ) ).unwrap();
  let config:Config = toml::from_str( &toml_str ).unwrap();
  let ios:IOSConfig = config.ios;
  
  let xcode_project = handlebars.render_template(xcode_project_template.as_str(), &ios ).unwrap();
  std::fs::write( cwd.join( "ios/project.yml" ), xcode_project ).expect( "Unable to write ios/project.yml file" );

  let mobile_config = handlebars.render_template(mobile_template.as_str(), &ios ).unwrap();
  std::fs::write( cwd.join( "mobile.toml" ), mobile_config ).expect( "Unable to write mobile.toml file" );
}
'''

[tasks.generate-ios-project]
# private = true
dependencies = [ "generate-ios-config" ]
condition = { files_not_exist = [ "${CARGO_MAKE_WORKING_DIRECTORY}/ios/webgpu.xcodeproj" ] }
command = "xcodegen"
args = [ "--spec", "ios/project.yml" ]

[tasks.build-ios-target]
private = true
script_runner = "@shell"
script = '''
xcrun xcodebuild -project ios/webgpu.xcodeproj -scheme webgpu_iOS -arch x86_64 -derivedDataPath ios/out
'''

[tasks.run-ios-target]
private = true
script_runner = "@shell"
script = '''
open -a simulator
sleep 5
xcrun simctl install booted ios/out/Build/Products/debug-iphonesimulator/webgpu.app
xcrun simctl launch booted com.example.webgpu
'''

[tasks.run-web-server]
private = true
install_crate = "basic-http-server"
command = "basic-http-server"
args = [ "target/web", "-a", "127.0.0.1:${CARGO_MAKE_WEB_PORT}" ]


#### Public

[tasks.build]
description = "Build desktop target. Rebuilds on change."
private = false
extend = "watch"
category = "Build"
command = "cargo"
args = [ "build" ]

[tasks.build-web]
description = "Build web target. Rebuilds on change."
private = false
extend = "watch"
category = "Build"
dependencies = [ "build-web-target", "build-web-bindings", "build-web-copy-static" ]

[tasks.build-android]
description = "Build android target. Rebuilds on change."
private = false
extend = "watch"
category = "Build"
dependencies = [ "build-android-target" ]

[tasks.run]
description = "Run desktop target. Rebuilds app on change"
private = false
extend = "watch"
category = "Run"
command = "cargo"
args = [ "run" ]

#[tasks.run-web]
#description = "Run web target. Rebuilds app on change"
#category = "Run"
#run_task = { name = [ "run-web-server", "build-web" ], parallel = true }

[tasks.run-web]
description = "Run web target. Rebuilds app on change"
category = "Run"
extend = "build-web"
run_task = { name = [ "run-web-server" ] }

[tasks.run-android]
description = "Run android target. Rebuilds on change."
private = false
extend = "watch"
category = "Run"
dependencies = [ "run-android-target" ]

[tasks.run-ios]
description = "Run ios target. Rebuilds on change."
private = false
category = "Run"
dependencies = [ "generate-ios-project", "build-ios-target", "run-ios-target" ]